generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  walletAddress String    @unique
  chainType     ChainType
  chainId       Int
  role          Role      @default(User)
  nonce         String?
  domain        String?
  issuedAt      DateTime?
  lastSignature String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  receipts     Receipt[]
  balances     TokenBalance[]
  transactions BalanceTransaction[]
}

model Receipt {
  id                String             @id @default(uuid())
  user              User               @relation(fields: [userWalletAddress], references: [walletAddress])
  userWalletAddress String
  transactionId     String             @unique
  transaction       BalanceTransaction @relation(fields: [transactionId], references: [id])
  status            ReceiptStatus      @default(PENDING)
  fileLocation      String?
  arweaveTxId       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tokenId           String
  token             Token              @relation(fields: [tokenId], references: [id])
  cost              Decimal
  costUSD           Decimal
}

model TokenBalance {
  id      String  @id @default(uuid())
  tokenId String
  token   Token   @relation(fields: [tokenId], references: [id])
  balance Decimal @default(0.0)

  userWalletAddress String
  user              User   @relation(fields: [userWalletAddress], references: [walletAddress])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userWalletAddress, tokenId])
}

model Token {
  id            String               @id @default(uuid())
  name          String
  ticker        TokenTicker
  decimals      Int
  chainType     ChainType
  chainId       Int
  network       Network
  receipts      Receipt[]
  transactions  BalanceTransaction[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  tokenBalances TokenBalance[]
}

model BalanceTransaction {
  id                String @id @default(uuid())
  userWalletAddress String
  user              User   @relation(fields: [userWalletAddress], references: [walletAddress])

  tokenId         String
  token           Token             @relation(fields: [tokenId], references: [id])
  amount          Decimal
  status          TransactionStatus @default(PENDING)
  transactionHash String?           @unique
  receipt         Receipt?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum TokenTicker {
  USDC
  USDT
  ETH
  SOL
  AR
}

enum Role {
  User
  Admin
}

enum ReceiptStatus {
  PENDING
  PAID
  COMPLETED
  FAILED
}

enum ChainType {
  evm
  solana
  arweave
}

enum Network {
  mainnet
  testnet
}
